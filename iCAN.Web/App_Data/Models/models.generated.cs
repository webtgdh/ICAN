//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.7.99
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

[assembly: PureLiveAssembly]
[assembly:ModelsBuilderAssembly(PureLive = true, SourceHash = "d8cd6ba56b495e1e")]
[assembly:System.Reflection.AssemblyVersion("0.0.0.4")]

namespace Umbraco.Web.PublishedContentModels
{
	// Mixin content Type 1105 with alias "admin"
	/// <summary>_Admin</summary>
	public partial interface IAdmin : IPublishedContent
	{
		/// <summary>Don't follow</summary>
		bool DontFollow { get; }

		/// <summary>Hide from search</summary>
		bool HideFromSearch { get; }

		/// <summary>Invisible redirect</summary>
		IPublishedContent UmbracoInternalRedirectId { get; }

		/// <summary>Hide from navigation</summary>
		bool UmbracoNaviHide { get; }

		/// <summary>URL alias</summary>
		string UmbracoUrlAlias { get; }

		/// <summary>URL slug</summary>
		string UmbracoUrlName { get; }
	}

	/// <summary>_Admin</summary>
	[PublishedContentModel("admin")]
	public partial class Admin : PublishedContentModel, IAdmin
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "admin";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Admin(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Admin, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return GetDontFollow(this); }
		}

		/// <summary>Static getter for Don't follow</summary>
		public static bool GetDontFollow(IAdmin that) { return that.GetPropertyValue<bool>("dontFollow"); }

		///<summary>
		/// Hide from search: Checking this will hide the page from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return GetHideFromSearch(this); }
		}

		/// <summary>Static getter for Hide from search</summary>
		public static bool GetHideFromSearch(IAdmin that) { return that.GetPropertyValue<bool>("hideFromSearch"); }

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public IPublishedContent UmbracoInternalRedirectId
		{
			get { return GetUmbracoInternalRedirectId(this); }
		}

		/// <summary>Static getter for Invisible redirect</summary>
		public static IPublishedContent GetUmbracoInternalRedirectId(IAdmin that) { return that.GetPropertyValue<IPublishedContent>("umbracoInternalRedirectId"); }

		///<summary>
		/// Hide from navigation: Checking this will hide the page from navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return GetUmbracoNaviHide(this); }
		}

		/// <summary>Static getter for Hide from navigation</summary>
		public static bool GetUmbracoNaviHide(IAdmin that) { return that.GetPropertyValue<bool>("umbracoNaviHide"); }

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return GetUmbracoUrlAlias(this); }
		}

		/// <summary>Static getter for URL alias</summary>
		public static string GetUmbracoUrlAlias(IAdmin that) { return that.GetPropertyValue<string>("umbracoUrlAlias"); }

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return GetUmbracoUrlName(this); }
		}

		/// <summary>Static getter for URL slug</summary>
		public static string GetUmbracoUrlName(IAdmin that) { return that.GetPropertyValue<string>("umbracoUrlName"); }
	}

	// Mixin content Type 1106 with alias "contentWithHeadlineAndComponents"
	/// <summary>_Content [headline, components]</summary>
	public partial interface IContentWithHeadlineAndComponents : IPublishedContent
	{
		/// <summary>Headline</summary>
		string Headline { get; }

		/// <summary>Content</summary>
		IEnumerable<IPublishedContent> PageComponents { get; }
	}

	/// <summary>_Content [headline, components]</summary>
	[PublishedContentModel("contentWithHeadlineAndComponents")]
	public partial class ContentWithHeadlineAndComponents : PublishedContentModel, IContentWithHeadlineAndComponents
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contentWithHeadlineAndComponents";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContentWithHeadlineAndComponents(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContentWithHeadlineAndComponents, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return GetHeadline(this); }
		}

		/// <summary>Static getter for Headline</summary>
		public static string GetHeadline(IContentWithHeadlineAndComponents that) { return that.GetPropertyValue<string>("headline"); }

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("pageComponents")]
		public IEnumerable<IPublishedContent> PageComponents
		{
			get { return GetPageComponents(this); }
		}

		/// <summary>Static getter for Content</summary>
		public static IEnumerable<IPublishedContent> GetPageComponents(IContentWithHeadlineAndComponents that) { return that.GetPropertyValue<IEnumerable<IPublishedContent>>("pageComponents"); }
	}

	// Mixin content Type 1107 with alias "contentWithHeadline"
	/// <summary>_Content [headline]</summary>
	public partial interface IContentWithHeadline : IPublishedContent
	{
		/// <summary>Headline</summary>
		string Headline { get; }
	}

	/// <summary>_Content [headline]</summary>
	[PublishedContentModel("contentWithHeadline")]
	public partial class ContentWithHeadline : PublishedContentModel, IContentWithHeadline
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contentWithHeadline";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContentWithHeadline(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContentWithHeadline, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Headline: If left blank, the page name will be used instead
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return GetHeadline(this); }
		}

		/// <summary>Static getter for Headline</summary>
		public static string GetHeadline(IContentWithHeadline that) { return that.GetPropertyValue<string>("headline"); }
	}

	// Mixin content Type 1108 with alias "meta"
	/// <summary>_Meta</summary>
	public partial interface IMeta : IPublishedContent
	{
		/// <summary>Featured image</summary>
		IPublishedContent FeaturedImage { get; }

		/// <summary>Page description</summary>
		object PageDescription { get; }
	}

	/// <summary>_Meta</summary>
	[PublishedContentModel("meta")]
	public partial class Meta : PublishedContentModel, IMeta
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "meta";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Meta(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Meta, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Featured image: Image shown when listing or linked to the page on the site
		///</summary>
		[ImplementPropertyType("featuredImage")]
		public IPublishedContent FeaturedImage
		{
			get { return GetFeaturedImage(this); }
		}

		/// <summary>Static getter for Featured image</summary>
		public static IPublishedContent GetFeaturedImage(IMeta that) { return that.GetPropertyValue<IPublishedContent>("featuredImage"); }

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return GetPageDescription(this); }
		}

		/// <summary>Static getter for Page description</summary>
		public static object GetPageDescription(IMeta that) { return that.GetPropertyValue("pageDescription"); }
	}

	// Mixin content Type 1109 with alias "sEO"
	/// <summary>_SEO</summary>
	public partial interface ISEO : IPublishedContent
	{
		/// <summary>SEO description</summary>
		object SEodescription { get; }

		/// <summary>SEO title</summary>
		object SEotitle { get; }

		/// <summary>Social media image</summary>
		IPublishedContent SocialMediaImage { get; }
	}

	/// <summary>_SEO</summary>
	[PublishedContentModel("sEO")]
	public partial class SEO : PublishedContentModel, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sEO";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SEO(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SEO, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("sEODescription")]
		public object SEodescription
		{
			get { return GetSEodescription(this); }
		}

		/// <summary>Static getter for SEO description</summary>
		public static object GetSEodescription(ISEO that) { return that.GetPropertyValue("sEODescription"); }

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("sEOTitle")]
		public object SEotitle
		{
			get { return GetSEotitle(this); }
		}

		/// <summary>Static getter for SEO title</summary>
		public static object GetSEotitle(ISEO that) { return that.GetPropertyValue("sEOTitle"); }

		///<summary>
		/// Social media image: Image will be shown when sharing the page on social networks such as Facebook
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public IPublishedContent SocialMediaImage
		{
			get { return GetSocialMediaImage(this); }
		}

		/// <summary>Static getter for Social media image</summary>
		public static IPublishedContent GetSocialMediaImage(ISEO that) { return that.GetPropertyValue<IPublishedContent>("socialMediaImage"); }
	}

	/// <summary>Accordion</summary>
	[PublishedContentModel("accordion")]
	public partial class Accordion : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "accordion";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Accordion(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Accordion, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Items: Each entry will be a new accordion tab
		///</summary>
		[ImplementPropertyType("tabs")]
		public IEnumerable<IPublishedContent> Tabs
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("tabs"); }
		}
	}

	/// <summary>Author</summary>
	[PublishedContentModel("author")]
	public partial class Author : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "author";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Author(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Author, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Bio: A short write-up about the author
		///</summary>
		[ImplementPropertyType("bio")]
		public IHtmlString Bio
		{
			get { return this.GetPropertyValue<IHtmlString>("bio"); }
		}

		///<summary>
		/// Profile picture
		///</summary>
		[ImplementPropertyType("profilePicture")]
		public IPublishedContent ProfilePicture
		{
			get { return this.GetPropertyValue<IPublishedContent>("profilePicture"); }
		}
	}

	/// <summary>Authors</summary>
	[PublishedContentModel("authors")]
	public partial class Authors : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "authors";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Authors(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Authors, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Blog</summary>
	[PublishedContentModel("blog")]
	public partial class Blog : PublishedContentModel, IAdmin, IMeta, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "blog";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Blog(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Blog, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// No results message: Message shown when no results are found
		///</summary>
		[ImplementPropertyType("noResultsMessage")]
		public IHtmlString NoResultsMessage
		{
			get { return this.GetPropertyValue<IHtmlString>("noResultsMessage"); }
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the page from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public IPublishedContent UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Featured image: Image shown when listing or linked to the page on the site
		///</summary>
		[ImplementPropertyType("featuredImage")]
		public IPublishedContent FeaturedImage
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetFeaturedImage(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetPageDescription(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("sEODescription")]
		public object SEodescription
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEodescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("sEOTitle")]
		public object SEotitle
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEotitle(this); }
		}

		///<summary>
		/// Social media image: Image will be shown when sharing the page on social networks such as Facebook
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public IPublishedContent SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Categories</summary>
	[PublishedContentModel("categories")]
	public partial class Categories : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "categories";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Categories(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Categories, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Category</summary>
	[PublishedContentModel("category")]
	public partial class Category : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "category";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Category(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Category, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Contact</summary>
	[PublishedContentModel("contact")]
	public partial class Contact : PublishedContentModel, IAdmin, IContentWithHeadline, IMeta, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contact";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Contact(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Contact, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the page from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public IPublishedContent UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used instead
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.ContentWithHeadline.GetHeadline(this); }
		}

		///<summary>
		/// Featured image: Image shown when listing or linked to the page on the site
		///</summary>
		[ImplementPropertyType("featuredImage")]
		public IPublishedContent FeaturedImage
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetFeaturedImage(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetPageDescription(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("sEODescription")]
		public object SEodescription
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEodescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("sEOTitle")]
		public object SEotitle
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEotitle(this); }
		}

		///<summary>
		/// Social media image: Image will be shown when sharing the page on social networks such as Facebook
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public IPublishedContent SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Contact details</summary>
	[PublishedContentModel("contactDetails")]
	public partial class ContactDetails : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contactDetails";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContactDetails(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContactDetails, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		/*
		 * THIS PROPERTY CANNOT BE IMPLEMENTED, BECAUSE:
		 *
		 * CSharp does not support naming the property with alias
		 * "contactDetails" with the same name as content type
		 * with alias "contactDetails". Consider using an attribute
		 * to assign a different name to the property.
		 *

		///<summary>
		/// Contact details: All contact details for this section (phone, email, fax)
		///</summary>
		[ImplementPropertyType("contactDetails")]
		public IEnumerable<IPublishedContent> ContactDetails
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("contactDetails"); }
		}

		 *
		 */

		///<summary>
		/// Headline
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return this.GetPropertyValue<string>("headline"); }
		}
	}

	/// <summary>Contact form</summary>
	[PublishedContentModel("contactForm")]
	public partial class ContactForm : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contactForm";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContactForm(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContactForm, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Email address
		///</summary>
		[ImplementPropertyType("emailAddress")]
		public string EmailAddress
		{
			get { return this.GetPropertyValue<string>("emailAddress"); }
		}

		///<summary>
		/// Message
		///</summary>
		[ImplementPropertyType("message")]
		public string Message
		{
			get { return this.GetPropertyValue<string>("message"); }
		}

		///<summary>
		/// Page name: Name of the page that the form was submitted on
		///</summary>
		[ImplementPropertyType("pageName")]
		public string PageName
		{
			get { return this.GetPropertyValue<string>("pageName"); }
		}

		///<summary>
		/// Sender name
		///</summary>
		[ImplementPropertyType("senderName")]
		public string SenderName
		{
			get { return this.GetPropertyValue<string>("senderName"); }
		}
	}

	/// <summary>Downloads</summary>
	[PublishedContentModel("downloads")]
	public partial class Downloads : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "downloads";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Downloads(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Downloads, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Files: Files to be listed in the downloads area
		///</summary>
		[ImplementPropertyType("files")]
		public IEnumerable<IPublishedContent> Files
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("files"); }
		}

		///<summary>
		/// Headline
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return this.GetPropertyValue<string>("headline"); }
		}
	}

	/// <summary>Embed</summary>
	[PublishedContentModel("embed")]
	public partial class Embed : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "embed";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Embed(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Embed, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Embed code: Embed code from source (YouTube, Google Maps)
		///</summary>
		[ImplementPropertyType("embedCode")]
		public string EmbedCode
		{
			get { return this.GetPropertyValue<string>("embedCode"); }
		}
	}

	/// <summary>Error page</summary>
	[PublishedContentModel("errorPage")]
	public partial class ErrorPage : PublishedContentModel, IAdmin, IContentWithHeadline
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "errorPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ErrorPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ErrorPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the page from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public IPublishedContent UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used instead
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.ContentWithHeadline.GetHeadline(this); }
		}
	}

	/// <summary>Form folder</summary>
	[PublishedContentModel("formFolder")]
	public partial class FormFolder : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "formFolder";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FormFolder(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FormFolder, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// From address: FROM email address (default is noreply@)
		///</summary>
		[ImplementPropertyType("fromAddress")]
		public string FromAddress
		{
			get { return this.GetPropertyValue<string>("fromAddress"); }
		}

		///<summary>
		/// Internal notification address: This is the email address that will receive the email from the form once submitted
		///</summary>
		[ImplementPropertyType("internalNotificationAddress")]
		public string InternalNotificationAddress
		{
			get { return this.GetPropertyValue<string>("internalNotificationAddress"); }
		}

		///<summary>
		/// Internal notifications CC: CC addresses for internal notifications (comma separated)
		///</summary>
		[ImplementPropertyType("internalNotificationsCC")]
		public string InternalNotificationsCC
		{
			get { return this.GetPropertyValue<string>("internalNotificationsCC"); }
		}

		///<summary>
		/// Notification headline: Headline of the confirmation email notification
		///</summary>
		[ImplementPropertyType("notificationHeadline")]
		public string NotificationHeadline
		{
			get { return this.GetPropertyValue<string>("notificationHeadline"); }
		}

		///<summary>
		/// Notification message: Confirmation email body send to the person submitting the form.
		///</summary>
		[ImplementPropertyType("notificationMessage")]
		public IHtmlString NotificationMessage
		{
			get { return this.GetPropertyValue<IHtmlString>("notificationMessage"); }
		}

		///<summary>
		/// Sender name: Name of the sender
		///</summary>
		[ImplementPropertyType("senderName")]
		public string SenderName
		{
			get { return this.GetPropertyValue<string>("senderName"); }
		}

		///<summary>
		/// Send notification?: Checking this will send a notification email to the person who submitted the form
		///</summary>
		[ImplementPropertyType("sendNotification")]
		public bool SendNotification
		{
			get { return this.GetPropertyValue<bool>("sendNotification"); }
		}

		///<summary>
		/// Submit message: If no 'submit page' is selected (above), this message will be shown when the form is submitted
		///</summary>
		[ImplementPropertyType("submitMessage")]
		public string SubmitMessage
		{
			get { return this.GetPropertyValue<string>("submitMessage"); }
		}

		///<summary>
		/// Submit page: If a page is selected, the user will be redirected to it when the form is submitted
		///</summary>
		[ImplementPropertyType("submitPage")]
		public IPublishedContent SubmitPage
		{
			get { return this.GetPropertyValue<IPublishedContent>("submitPage"); }
		}
	}

	/// <summary>Gallery</summary>
	[PublishedContentModel("gallery")]
	public partial class Gallery : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "gallery";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Gallery(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Gallery, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Alignment: The gallery will be aligned to this selection (content width if blank)
		///</summary>
		[ImplementPropertyType("alignment")]
		public string Alignment
		{
			get { return this.GetPropertyValue<string>("alignment"); }
		}

		///<summary>
		/// Aspect ratio: Picking an aspect ratio will use the crop from the media section
		///</summary>
		[ImplementPropertyType("aspectRatio")]
		public string AspectRatio
		{
			get { return this.GetPropertyValue<string>("aspectRatio"); }
		}

		///<summary>
		/// Images: Images for the gallery
		///</summary>
		[ImplementPropertyType("images")]
		public IEnumerable<IPublishedContent> Images
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("images"); }
		}
	}

	/// <summary>Gateway page</summary>
	[PublishedContentModel("gatewayPage")]
	public partial class GatewayPage : PublishedContentModel, IAdmin, IContentWithHeadline, IMeta, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "gatewayPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public GatewayPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<GatewayPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Featured pages: Picked pages will be highlighted
		///</summary>
		[ImplementPropertyType("featuredPages")]
		public IEnumerable<IPublishedContent> FeaturedPages
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("featuredPages"); }
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the page from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public IPublishedContent UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used instead
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.ContentWithHeadline.GetHeadline(this); }
		}

		///<summary>
		/// Featured image: Image shown when listing or linked to the page on the site
		///</summary>
		[ImplementPropertyType("featuredImage")]
		public IPublishedContent FeaturedImage
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetFeaturedImage(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetPageDescription(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("sEODescription")]
		public object SEodescription
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEodescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("sEOTitle")]
		public object SEotitle
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEotitle(this); }
		}

		///<summary>
		/// Social media image: Image will be shown when sharing the page on social networks such as Facebook
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public IPublishedContent SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSocialMediaImage(this); }
		}
	}

	/// <summary>General news</summary>
	[PublishedContentModel("generalNews")]
	public partial class GeneralNews : PublishedContentModel, IAdmin, IContentWithHeadlineAndComponents, IMeta, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "generalNews";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public GeneralNews(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<GeneralNews, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Release date: Date the article was posted
		///</summary>
		[ImplementPropertyType("releaseDate")]
		public DateTime ReleaseDate
		{
			get { return this.GetPropertyValue<DateTime>("releaseDate"); }
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the page from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public IPublishedContent UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.ContentWithHeadlineAndComponents.GetHeadline(this); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("pageComponents")]
		public IEnumerable<IPublishedContent> PageComponents
		{
			get { return Umbraco.Web.PublishedContentModels.ContentWithHeadlineAndComponents.GetPageComponents(this); }
		}

		///<summary>
		/// Featured image: Image shown when listing or linked to the page on the site
		///</summary>
		[ImplementPropertyType("featuredImage")]
		public IPublishedContent FeaturedImage
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetFeaturedImage(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetPageDescription(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("sEODescription")]
		public object SEodescription
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEodescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("sEOTitle")]
		public object SEotitle
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEotitle(this); }
		}

		///<summary>
		/// Social media image: Image will be shown when sharing the page on social networks such as Facebook
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public IPublishedContent SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Global settings</summary>
	[PublishedContentModel("globalSettings")]
	public partial class GlobalSettings : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "globalSettings";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public GlobalSettings(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<GlobalSettings, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Copyright disclaimer: Legal information that appears at the bottom of the page (Press Shift + ENTER for new line)
		///</summary>
		[ImplementPropertyType("copyrightDisclaimer")]
		public object CopyrightDisclaimer
		{
			get { return this.GetPropertyValue("copyrightDisclaimer"); }
		}

		///<summary>
		/// Default featured image: Default image used in gateway pages and listings
		///</summary>
		[ImplementPropertyType("defaultFeaturedImage")]
		public IPublishedContent DefaultFeaturedImage
		{
			get { return this.GetPropertyValue<IPublishedContent>("defaultFeaturedImage"); }
		}

		///<summary>
		/// Default social media image: Default image used when sharing a page on social media
		///</summary>
		[ImplementPropertyType("defaultSocialMediaImage")]
		public IPublishedContent DefaultSocialMediaImage
		{
			get { return this.GetPropertyValue<IPublishedContent>("defaultSocialMediaImage"); }
		}

		///<summary>
		/// Footer navigation: Selected pages are displayed at the bottom of the page
		///</summary>
		[ImplementPropertyType("footerNavigation")]
		public IEnumerable<IPublishedContent> FooterNavigation
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("footerNavigation"); }
		}

		///<summary>
		/// Site logo: This should be your logo and will be used in places like search results
		///</summary>
		[ImplementPropertyType("siteLogo")]
		public IPublishedContent SiteLogo
		{
			get { return this.GetPropertyValue<IPublishedContent>("siteLogo"); }
		}

		///<summary>
		/// Social channels: Social media channel links
		///</summary>
		[ImplementPropertyType("socialChannels")]
		public IEnumerable<IPublishedContent> SocialChannels
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("socialChannels"); }
		}

		///<summary>
		/// Tracking Id: Google Analytics ID (UA-000000-01)
		///</summary>
		[ImplementPropertyType("trackingId")]
		public string TrackingId
		{
			get { return this.GetPropertyValue<string>("trackingId"); }
		}

		///<summary>
		/// Twitter handle: This will be used when sharing pages on Twitter
		///</summary>
		[ImplementPropertyType("twitterHandle")]
		public string TwitterHandle
		{
			get { return this.GetPropertyValue<string>("twitterHandle"); }
		}

		///<summary>
		/// Website name: This is used in titles on search engines and social media
		///</summary>
		[ImplementPropertyType("websiteName")]
		public object WebsiteName
		{
			get { return this.GetPropertyValue("websiteName"); }
		}
	}

	/// <summary>Home</summary>
	[PublishedContentModel("home")]
	public partial class Home : PublishedContentModel, IAdmin, IMeta, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "home";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Home(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Home, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the page from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public IPublishedContent UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Featured image: Image shown when listing or linked to the page on the site
		///</summary>
		[ImplementPropertyType("featuredImage")]
		public IPublishedContent FeaturedImage
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetFeaturedImage(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetPageDescription(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("sEODescription")]
		public object SEodescription
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEodescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("sEOTitle")]
		public object SEotitle
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEotitle(this); }
		}

		///<summary>
		/// Social media image: Image will be shown when sharing the page on social networks such as Facebook
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public IPublishedContent SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Image</summary>
	[PublishedContentModel("imageObject")]
	public partial class ImageObject : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "imageObject";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ImageObject(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ImageObject, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Alignment: The image will be aligned to this selection  (full width if blank)
		///</summary>
		[ImplementPropertyType("alignment")]
		public string Alignment
		{
			get { return this.GetPropertyValue<string>("alignment"); }
		}

		///<summary>
		/// Aspect ratio: Picking an aspect ratio will use the crop from the media section
		///</summary>
		[ImplementPropertyType("aspectRatio")]
		public string AspectRatio
		{
			get { return this.GetPropertyValue<string>("aspectRatio"); }
		}

		///<summary>
		/// Image: Pick an image from the media library
		///</summary>
		[ImplementPropertyType("image")]
		public IPublishedContent Image
		{
			get { return this.GetPropertyValue<IPublishedContent>("image"); }
		}

		///<summary>
		/// Link: Optional: Adding a URL will turn the image into a link
		///</summary>
		[ImplementPropertyType("link")]
		public RJP.MultiUrlPicker.Models.Link Link
		{
			get { return this.GetPropertyValue<RJP.MultiUrlPicker.Models.Link>("link"); }
		}
	}

	/// <summary>In the media</summary>
	[PublishedContentModel("inTheMedia")]
	public partial class InTheMedia : PublishedContentModel, IContentWithHeadline
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "inTheMedia";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public InTheMedia(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<InTheMedia, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Excerpt: Short paragraph from the article
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return this.GetPropertyValue("pageDescription"); }
		}

		///<summary>
		/// Release date: Date the article was posted
		///</summary>
		[ImplementPropertyType("releaseDate")]
		public DateTime ReleaseDate
		{
			get { return this.GetPropertyValue<DateTime>("releaseDate"); }
		}

		///<summary>
		/// Source: Link to external news article (e.g. http://example.com)
		///</summary>
		[ImplementPropertyType("source")]
		public string Source
		{
			get { return this.GetPropertyValue<string>("source"); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used instead
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.ContentWithHeadline.GetHeadline(this); }
		}
	}

	/// <summary>Label with value</summary>
	[PublishedContentModel("labelWithValue")]
	public partial class LabelWithValue : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "labelWithValue";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public LabelWithValue(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<LabelWithValue, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Label: Label of the value
		///</summary>
		[ImplementPropertyType("label")]
		public object Label
		{
			get { return this.GetPropertyValue("label"); }
		}

		///<summary>
		/// Value: Value shown
		///</summary>
		[ImplementPropertyType("value")]
		public string Value
		{
			get { return this.GetPropertyValue<string>("value"); }
		}
	}

	/// <summary>News</summary>
	[PublishedContentModel("news")]
	public partial class News : PublishedContentModel, IAdmin, IMeta, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "news";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public News(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<News, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// No results message: Message shown when no results are found
		///</summary>
		[ImplementPropertyType("noResultsMessage")]
		public IHtmlString NoResultsMessage
		{
			get { return this.GetPropertyValue<IHtmlString>("noResultsMessage"); }
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the page from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public IPublishedContent UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Featured image: Image shown when listing or linked to the page on the site
		///</summary>
		[ImplementPropertyType("featuredImage")]
		public IPublishedContent FeaturedImage
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetFeaturedImage(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetPageDescription(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("sEODescription")]
		public object SEodescription
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEodescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("sEOTitle")]
		public object SEotitle
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEotitle(this); }
		}

		///<summary>
		/// Social media image: Image will be shown when sharing the page on social networks such as Facebook
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public IPublishedContent SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Not found</summary>
	[PublishedContentModel("notFound")]
	public partial class NotFound : PublishedContentModel, IAdmin, IContentWithHeadlineAndComponents
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "notFound";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public NotFound(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NotFound, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the page from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public IPublishedContent UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.ContentWithHeadlineAndComponents.GetHeadline(this); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("pageComponents")]
		public IEnumerable<IPublishedContent> PageComponents
		{
			get { return Umbraco.Web.PublishedContentModels.ContentWithHeadlineAndComponents.GetPageComponents(this); }
		}
	}

	/// <summary>Post</summary>
	[PublishedContentModel("post")]
	public partial class Post : PublishedContentModel, IAdmin, IContentWithHeadlineAndComponents, IMeta, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "post";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Post(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Post, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Author: Author of the post
		///</summary>
		[ImplementPropertyType("author")]
		public IEnumerable<IPublishedContent> Author
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("author"); }
		}

		///<summary>
		/// Category: Category of the post
		///</summary>
		[ImplementPropertyType("category")]
		public IEnumerable<IPublishedContent> Category
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("category"); }
		}

		///<summary>
		/// Release date: Date the article was posted
		///</summary>
		[ImplementPropertyType("releaseDate")]
		public DateTime ReleaseDate
		{
			get { return this.GetPropertyValue<DateTime>("releaseDate"); }
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the page from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public IPublishedContent UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.ContentWithHeadlineAndComponents.GetHeadline(this); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("pageComponents")]
		public IEnumerable<IPublishedContent> PageComponents
		{
			get { return Umbraco.Web.PublishedContentModels.ContentWithHeadlineAndComponents.GetPageComponents(this); }
		}

		///<summary>
		/// Featured image: Image shown when listing or linked to the page on the site
		///</summary>
		[ImplementPropertyType("featuredImage")]
		public IPublishedContent FeaturedImage
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetFeaturedImage(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetPageDescription(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("sEODescription")]
		public object SEodescription
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEodescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("sEOTitle")]
		public object SEotitle
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEotitle(this); }
		}

		///<summary>
		/// Social media image: Image will be shown when sharing the page on social networks such as Facebook
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public IPublishedContent SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Press release</summary>
	[PublishedContentModel("pressRelease")]
	public partial class PressRelease : PublishedContentModel, IAdmin, IContentWithHeadlineAndComponents, IMeta, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "pressRelease";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PressRelease(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PressRelease, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Release date: Date the article was posted
		///</summary>
		[ImplementPropertyType("releaseDate")]
		public DateTime ReleaseDate
		{
			get { return this.GetPropertyValue<DateTime>("releaseDate"); }
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the page from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public IPublishedContent UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.ContentWithHeadlineAndComponents.GetHeadline(this); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("pageComponents")]
		public IEnumerable<IPublishedContent> PageComponents
		{
			get { return Umbraco.Web.PublishedContentModels.ContentWithHeadlineAndComponents.GetPageComponents(this); }
		}

		///<summary>
		/// Featured image: Image shown when listing or linked to the page on the site
		///</summary>
		[ImplementPropertyType("featuredImage")]
		public IPublishedContent FeaturedImage
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetFeaturedImage(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetPageDescription(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("sEODescription")]
		public object SEodescription
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEodescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("sEOTitle")]
		public object SEotitle
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEotitle(this); }
		}

		///<summary>
		/// Social media image: Image will be shown when sharing the page on social networks such as Facebook
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public IPublishedContent SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Quote</summary>
	[PublishedContentModel("quote")]
	public partial class Quote : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "quote";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Quote(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Quote, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		/*
		 * THIS PROPERTY CANNOT BE IMPLEMENTED, BECAUSE:
		 *
		 * CSharp does not support naming the property with alias
		 * "quote" with the same name as content type with alias
		 * "quote". Consider using an attribute to assign a different
		 * name to the property.
		 *

		///<summary>
		/// Quote
		///</summary>
		[ImplementPropertyType("quote")]
		public IHtmlString Quote
		{
			get { return this.GetPropertyValue<IHtmlString>("quote"); }
		}

		 *
		 */

		///<summary>
		/// Source: Whom the quote was written by
		///</summary>
		[ImplementPropertyType("source")]
		public string Source
		{
			get { return this.GetPropertyValue<string>("source"); }
		}
	}

	/// <summary>Search</summary>
	[PublishedContentModel("search")]
	public partial class Search : PublishedContentModel, IAdmin, IContentWithHeadline, IMeta, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "search";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Search(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Search, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the page from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public IPublishedContent UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used instead
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.ContentWithHeadline.GetHeadline(this); }
		}

		///<summary>
		/// Featured image: Image shown when listing or linked to the page on the site
		///</summary>
		[ImplementPropertyType("featuredImage")]
		public IPublishedContent FeaturedImage
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetFeaturedImage(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetPageDescription(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("sEODescription")]
		public object SEodescription
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEodescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("sEOTitle")]
		public object SEotitle
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEotitle(this); }
		}

		///<summary>
		/// Social media image: Image will be shown when sharing the page on social networks such as Facebook
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public IPublishedContent SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Short name with text</summary>
	[PublishedContentModel("shortNameWithText")]
	public partial class ShortNameWithText : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "shortNameWithText";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ShortNameWithText(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ShortNameWithText, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content: Text content for this section
		///</summary>
		[ImplementPropertyType("content")]
		public IHtmlString Content
		{
			get { return this.GetPropertyValue<IHtmlString>("content"); }
		}

		///<summary>
		/// Short name
		///</summary>
		[ImplementPropertyType("shortName")]
		public object ShortName
		{
			get { return this.GetPropertyValue("shortName"); }
		}
	}

	/// <summary>Sitemap</summary>
	[PublishedContentModel("sitemap")]
	public partial class Sitemap : PublishedContentModel, IAdmin, IContentWithHeadline, IMeta, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sitemap";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Sitemap(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Sitemap, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the page from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public IPublishedContent UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used instead
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.ContentWithHeadline.GetHeadline(this); }
		}

		///<summary>
		/// Featured image: Image shown when listing or linked to the page on the site
		///</summary>
		[ImplementPropertyType("featuredImage")]
		public IPublishedContent FeaturedImage
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetFeaturedImage(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetPageDescription(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("sEODescription")]
		public object SEodescription
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEodescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("sEOTitle")]
		public object SEotitle
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEotitle(this); }
		}

		///<summary>
		/// Social media image: Image will be shown when sharing the page on social networks such as Facebook
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public IPublishedContent SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Social channel</summary>
	[PublishedContentModel("socialChannel")]
	public partial class SocialChannel : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "socialChannel";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SocialChannel(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SocialChannel, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Link: Full link to the chosen social channel (with http://)
		///</summary>
		[ImplementPropertyType("socialChannelLink")]
		public string SocialChannelLink
		{
			get { return this.GetPropertyValue<string>("socialChannelLink"); }
		}

		///<summary>
		/// Social channel name
		///</summary>
		[ImplementPropertyType("socialChannelName")]
		public string SocialChannelName
		{
			get { return this.GetPropertyValue<string>("socialChannelName"); }
		}
	}

	/// <summary>Tabs</summary>
	[PublishedContentModel("tabs")]
	public partial class Tabs : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "tabs";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Tabs(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Tabs, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		/*
		 * THIS PROPERTY CANNOT BE IMPLEMENTED, BECAUSE:
		 *
		 * CSharp does not support naming the property with alias
		 * "tabs" with the same name as content type with alias
		 * "tabs". Consider using an attribute to assign a different
		 * name to the property.
		 *

		///<summary>
		/// Tabs: Each entry will be a new tab
		///</summary>
		[ImplementPropertyType("tabs")]
		public IEnumerable<IPublishedContent> Tabs
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("tabs"); }
		}

		 *
		 */
	}

	/// <summary>Text</summary>
	[PublishedContentModel("text")]
	public partial class Text : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "text";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Text(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Text, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Label: Internal use label for this area (not visible on the website)
		///</summary>
		[ImplementPropertyType("label")]
		public string Label
		{
			get { return this.GetPropertyValue<string>("label"); }
		}

		/*
		 * THIS PROPERTY CANNOT BE IMPLEMENTED, BECAUSE:
		 *
		 * CSharp does not support naming the property with alias
		 * "text" with the same name as content type with alias
		 * "text". Consider using an attribute to assign a different
		 * name to the property.
		 *

		///<summary>
		/// Text: Text content for the page
		///</summary>
		[ImplementPropertyType("text")]
		public IHtmlString Text
		{
			get { return this.GetPropertyValue<IHtmlString>("text"); }
		}

		 *
		 */
	}

	/// <summary>Text page</summary>
	[PublishedContentModel("textPage")]
	public partial class TextPage : PublishedContentModel, IAdmin, IContentWithHeadlineAndComponents, IMeta, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "textPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public TextPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<TextPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the page from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public IPublishedContent UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.Admin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.ContentWithHeadlineAndComponents.GetHeadline(this); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("pageComponents")]
		public IEnumerable<IPublishedContent> PageComponents
		{
			get { return Umbraco.Web.PublishedContentModels.ContentWithHeadlineAndComponents.GetPageComponents(this); }
		}

		///<summary>
		/// Featured image: Image shown when listing or linked to the page on the site
		///</summary>
		[ImplementPropertyType("featuredImage")]
		public IPublishedContent FeaturedImage
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetFeaturedImage(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.Meta.GetPageDescription(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("sEODescription")]
		public object SEodescription
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEodescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("sEOTitle")]
		public object SEotitle
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSEotitle(this); }
		}

		///<summary>
		/// Social media image: Image will be shown when sharing the page on social networks such as Facebook
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public IPublishedContent SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Button</summary>
	[PublishedContentModel("button")]
	public partial class Button : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "button";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Button(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Button, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Button link
		///</summary>
		[ImplementPropertyType("buttonLink")]
		public RJP.MultiUrlPicker.Models.Link ButtonLink
		{
			get { return this.GetPropertyValue<RJP.MultiUrlPicker.Models.Link>("buttonLink"); }
		}
	}

	/// <summary>Folder</summary>
	[PublishedContentModel("Folder")]
	public partial class Folder : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Folder";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Folder(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Folder, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Contents:
		///</summary>
		[ImplementPropertyType("contents")]
		public object Contents
		{
			get { return this.GetPropertyValue("contents"); }
		}
	}

	/// <summary>Image</summary>
	[PublishedContentModel("Image")]
	public partial class Image : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Image";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Image(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Image, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Alt text: Describe what's in the image. Search engines use this as a ranking factor
		///</summary>
		[ImplementPropertyType("altText")]
		public string AltText
		{
			get { return this.GetPropertyValue<string>("altText"); }
		}

		///<summary>
		/// Caption: Text will be shown with the image
		///</summary>
		[ImplementPropertyType("caption")]
		public string Caption
		{
			get { return this.GetPropertyValue<string>("caption"); }
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload image
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public Umbraco.Web.Models.ImageCropDataSet UmbracoFile
		{
			get { return this.GetPropertyValue<Umbraco.Web.Models.ImageCropDataSet>("umbracoFile"); }
		}

		///<summary>
		/// Height
		///</summary>
		[ImplementPropertyType("umbracoHeight")]
		public string UmbracoHeight
		{
			get { return this.GetPropertyValue<string>("umbracoHeight"); }
		}

		///<summary>
		/// Width
		///</summary>
		[ImplementPropertyType("umbracoWidth")]
		public string UmbracoWidth
		{
			get { return this.GetPropertyValue<string>("umbracoWidth"); }
		}
	}

	/// <summary>File</summary>
	[PublishedContentModel("File")]
	public partial class File : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "File";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public File(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<File, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload file
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public string UmbracoFile
		{
			get { return this.GetPropertyValue<string>("umbracoFile"); }
		}
	}

	/// <summary>Member</summary>
	[PublishedContentModel("Member")]
	public partial class Member : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Member";
		public new const PublishedItemType ModelItemType = PublishedItemType.Member;
#pragma warning restore 0109

		public Member(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Member, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Is Approved
		///</summary>
		[ImplementPropertyType("umbracoMemberApproved")]
		public bool UmbracoMemberApproved
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberApproved"); }
		}

		///<summary>
		/// Comments
		///</summary>
		[ImplementPropertyType("umbracoMemberComments")]
		public string UmbracoMemberComments
		{
			get { return this.GetPropertyValue<string>("umbracoMemberComments"); }
		}

		///<summary>
		/// Failed Password Attempts
		///</summary>
		[ImplementPropertyType("umbracoMemberFailedPasswordAttempts")]
		public string UmbracoMemberFailedPasswordAttempts
		{
			get { return this.GetPropertyValue<string>("umbracoMemberFailedPasswordAttempts"); }
		}

		///<summary>
		/// Last Lockout Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLockoutDate")]
		public string UmbracoMemberLastLockoutDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLockoutDate"); }
		}

		///<summary>
		/// Last Login Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLogin")]
		public string UmbracoMemberLastLogin
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLogin"); }
		}

		///<summary>
		/// Last Password Change Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastPasswordChangeDate")]
		public string UmbracoMemberLastPasswordChangeDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastPasswordChangeDate"); }
		}

		///<summary>
		/// Is Locked Out
		///</summary>
		[ImplementPropertyType("umbracoMemberLockedOut")]
		public bool UmbracoMemberLockedOut
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberLockedOut"); }
		}

		///<summary>
		/// Password Answer
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalAnswer")]
		public string UmbracoMemberPasswordRetrievalAnswer
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalAnswer"); }
		}

		///<summary>
		/// Password Question
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalQuestion")]
		public string UmbracoMemberPasswordRetrievalQuestion
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalQuestion"); }
		}
	}

}
